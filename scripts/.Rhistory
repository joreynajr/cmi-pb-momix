theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
}
return(hm_plot)
}
plot_cca_heatmap(cor1, params$name1, 10)
cor1
# extract the top features for better visualization
top_feats1 = get_top_features(full_ds1, top)
feat_data1 = full_ds1[, top_feats]
# extract the top features for better visualization
top_feats1 = get_top_features(full_ds1, top)
feat_data1 = full_ds1[, top_feats1]
print(dim(feat_data1))
# extracts the top and bottom features
get_top_features = function(data, top){
num_cols = ncol(data)
feat_vars = resample::colVars(data)
vars_order = order(feat_vars)
curated_feats = c(colnames(data)[0:top],
colnames(data)[(num_cols - top + 1):num_cols])
return(curated_feats)
}
# plotting
plot_cca_heatmap <- function(matrix_data, assay, top=NULL){
if (!is.null(top)){
# melting the correlation matrices to use in ggplot2 heatmaps
plot_data <- melt(plot_data, varnames = c('feature', 'comp'))
# plot
hm_plot = ggplot(plot_data, aes(x=comp, y=reorder(feature, value), fill=value)) +
geom_tile() +
theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
}
else{
# melting the correlation matrices to use in ggplot2 heatmaps
plot_data <- melt(matrix_data, varnames = c('feature', 'comp'))
# plot
hm_plot = ggplot(plot_data, aes(x=comp, y=reorder(feature, value), fill=value)) +
geom_tile() +
theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
}
return(hm_plot)
}
# loading the cvector data
cvector1 = read.table(params$cvector1)
colnames(cvector1) = paste0("comp", seq(1, ncol(cvector1)))
cvector2 = read.table(params$cvector2)
colnames(cvector2) = paste0("comp", seq(1, ncol(cvector2)))
# extract the top features for better visualization
top_feats1 = get_top_features(full_ds1, top)
feat_data1 = full_ds1[, top_feats1]
print(dim(feat_data1))
cvector1
0:10
c(0:10, 11:20)
# extracts the top and bottom features
get_top_features = function(data, top){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
# extract the top features for better visualization
top_feats1 = get_top_features(full_ds1, top)
feat_data1 = full_ds1[, top_feats1]
top_feats2 = get_top_features(full_ds2, top)
feat_data2 = full_ds2[, top_feats2]
# extract the top features for better visualization
top_idxs1 = get_top_features(full_ds1, top)
top_idxs2 = get_top_features(full_ds2, top)
# loading the cvector data
cvector1 = read.table(params$cvector1)
colnames(cvector1) = paste0("comp", seq(1, ncol(cvector1)))
cvector2 = read.table(params$cvector2)
colnames(cvector2) = paste0("comp", seq(1, ncol(cvector2)))
# calculating the cvariables for genes with highest variance
top_cvar1 = as.matrix(full_ds1[, top_idxs1]) %*% as.matrix(cvector1[, top_idxs1])
# calculating the cvariables for genes with highest variance
top_cvar1 = as.matrix(full_ds1[, top_idxs1]) %*% as.matrix(cvector1[top_idxs1])
# extract the top features for better visualization
top_idxs1 = get_top_features(full_ds1, top)
top_idxs2 = get_top_features(full_ds2, top)
# calculating the cvariables for genes with highest variance
top_cvar1 = as.matrix(full_ds1[, top_idxs1]) %*% as.matrix(cvector1[top_idxs1])
top_idxs1
full_ds1
full_ds1[, top_idxs1
]
cvector1[top_idxs1]
cvector1
top_idxs1
cvector1[c(1,2,3)]
cvector1[1]
cvector1
# calculating the cvariables for genes with highest variance
top_cvar1 = as.matrix(full_ds1[, top_idxs1]) %*% as.matrix(cvector1[, top_idxs1])
dim(cvector1)
# calculating the cvariables for genes with highest variance
top_cvar1 = as.matrix(full_ds1[, top_idxs1]) %*% as.matrix(cvector1[top_idxs1, ])
top_cvar2 = as.matrix(full_ds2[, top_idxs2]) %*% as.matrix(cvector2[top_idxs2, ])
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1, cvar1)
cor2 = cor(full_ds2, cvar2)
plot_cca_heatmap(cor1, params$name1, 10)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1[, top_idxs1], top_cvar1)
cor2 = cor(full_ds2[, top_idxs2], top_cvar2)
plot_cca_heatmap(cor1, params$name1)
plot_cca_heatmap(cor2, params$name2)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1[, top_idxs1], top_cvar1, use='all.obs')
cor2 = cor(full_ds2[, top_idxs2], top_cvar2, use='all.obs')
plot_cca_heatmap(cor1, params$name1)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1[, top_idxs1], top_cvar1, use='complete.obs')
cor2 = cor(full_ds2[, top_idxs2], top_cvar2, use='complete.obs')
plot_cca_heatmap(cor1, params$name1)
top_cvar1
# loading the cvector data
cvector1 = read.table(params$cvector1)
colnames(cvector1) = paste0("comp", seq(1, ncol(cvector1)))
cvector2 = read.table(params$cvector2)
colnames(cvector2) = paste0("comp", seq(1, ncol(cvector2)))
# calculating the cvariables for genes with highest variance
cvar1 = as.matrix(full_ds1) %*% as.matrix(cvector1)
cvar2 = as.matrix(full_ds2) %*% as.matrix(cvector2)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1, cvar1, use='complete.obs')
cor2 = cor(full_ds2, cvar2, use='complete.obs')
View(cor1)
resample::colVars(t(cor1))
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
elif (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
}
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
elif (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
}
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
elif (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
else{
print('top_type can only be colVar or rowVar')
}
}
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
elif (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
else{
print('top_type can only be colVar or rowVar')
}
}
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
else if (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
else{
print('top_type can only be colVar or rowVar')
}
}
# plotting
plot_cca_heatmap <- function(matrix_data, assay, top=NULL){
if (!is.null(top)){
# melting the correlation matrices to use in ggplot2 heatmaps
plot_data <- melt(plot_data, varnames = c('feature', 'comp'))
# plot
hm_plot = ggplot(plot_data, aes(x=comp, y=reorder(feature, value), fill=value)) +
geom_tile() +
theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
}
else{
# melting the correlation matrices to use in ggplot2 heatmaps
plot_data <- melt(matrix_data, varnames = c('feature', 'comp'))
# plot
hm_plot = ggplot(plot_data, aes(x=comp, y=reorder(feature, value), fill=value)) +
geom_tile() +
theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
}
return(hm_plot)
}
# extract the top features for better visualization
top_idxs1 = get_top_features(full_ds1, top)
top_idxs2 = get_top_features(full_ds2, top)
# loading the cvector data
cvector1 = read.table(params$cvector1)
colnames(cvector1) = paste0("comp", seq(1, ncol(cvector1)))
cvector2 = read.table(params$cvector2)
colnames(cvector2) = paste0("comp", seq(1, ncol(cvector2)))
# calculating the cvariables for genes with highest variance
cvar1 = as.matrix(full_ds1) %*% as.matrix(cvector1)
cvar2 = as.matrix(full_ds2) %*% as.matrix(cvector2)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1, cvar1, use='complete.obs')
cor2 = cor(full_ds2, cvar2, use='complete.obs')
plot_cca_heatmap(cor1, params$name1)
best_idxs1 = get_top_features(cor1, 10, 'rowVar')
dim(cor1)
# extracts the top and bottom features
get_top_features = function(data, top, top_type="colVar"){
if (top_type == "colVar"){
num_cols = ncol(data)
fvariances = resample::colVars(data)
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_cols - top + 1):num_cols])
return(top_findexes)
}
else if (top_type == 'rowVar'){
num_rows = nrow(data)
fvariances = resample::colVars(t(data))
var_order = order(fvariances)
top_findexes = c(var_order[0:top],
var_order[(num_rows - top + 1):num_rows])
return(top_findexes)
}
else{
print('top_type can only be colVar or rowVar')
}
}
best_idxs1 = get_top_features(cor1, 10, 'rowVar')
best_idxs1
plot_cca_heatmap(cor1[best_row_idxs1, ], params$name1)
best_row_idxs1 = get_top_features(cor1, 10, 'rowVar')
best_row_idxs2 = get_top_features(cor1, 10, 'rowVar')
plot_cca_heatmap(cor1[best_row_idxs1, ], params$name1)
# plotting
plot_cca_heatmap <- function(matrix_data, assay){
# melting the correlation matrices to use in ggplot2 heatmaps
plot_data <- melt(matrix_data, varnames = c('feature', 'comp'))
# plot
hm_plot = ggplot(plot_data, aes(x=comp, y=reorder(feature, value), fill=value)) +
geom_tile() +
theme(axis.text.x=element_text(angle = 60,
vjust = 1,
hjust=1)) +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1),
space = "Lab",
name="Pearson\nCorrelation") +
ylab(assay)
return(hm_plot)
}
# extract the top features for better visualization
top_idxs1 = get_top_features(full_ds1, top)
top_idxs2 = get_top_features(full_ds2, top)
# loading the cvector data
cvector1 = read.table(params$cvector1)
colnames(cvector1) = paste0("comp", seq(1, ncol(cvector1)))
cvector2 = read.table(params$cvector2)
colnames(cvector2) = paste0("comp", seq(1, ncol(cvector2)))
# calculating the cvariables for genes with highest variance
cvar1 = as.matrix(full_ds1) %*% as.matrix(cvector1)
cvar2 = as.matrix(full_ds2) %*% as.matrix(cvector2)
# calculating the correlations between the cvariables and features
cor1 = cor(full_ds1, cvar1, use='complete.obs')
cor2 = cor(full_ds2, cvar2, use='complete.obs')
best_row_idxs1 = get_top_features(cor1, 10, 'rowVar')
best_row_idxs2 = get_top_features(cor1, 10, 'rowVar')
plot_cca_heatmap(cor1[best_row_idxs1, ], params$name1)
plot_cca_heatmap(cor2[best_row_idxs2, ], params$name2)
clinical_data = read.table("output/database_dump/subject_dump.tsv")
########## Adding aP versus wP information ##########
clinical_data = read.table("output/database_dump/subject_dump.tsv")
View(clinical_data)
########## Adding aP versus wP information ##########
clinical_data = read.table("output/database_dump/subject_dump.tsv")
library(rjson)
json_list = fromJSON(file='https://www.cmi-pb.org/db/subject')
data = sapply(json_list, as.vector)
data = as.data.frame(t(data))
View(data)
write.table(data,
file="output/database_dump/subject_dump.tsv",
quote=F,
row.names = F,
col.names = T,
sep = "\t")
write.table(data,
file="output/database_dump/subject_dump.tsv",
row.names = F,
col.names = T,
sep = "\t")
data[0,0]
data[1,1]
class(data[1,1])
class(data[,1])
class(data[1,])
json_list = fromJSON(file='https://www.cmi-pb.org/db/subject')
data = sapply(json_list, unlist)
data = as.data.frame(t(data))
class(data[1,])
class(data[,1])
write.table(data,
file="output/database_dump/subject_dump.tsv",
quote=F,
row.names = F,
col.names = T,
sep = "\t")
########## Adding aP versus wP information ##########
clinical_data = read.table("output/database_dump/subject_dump.tsv")
########## Adding aP versus wP information ##########
clinical_data = read.table("output/database_dump/subject_dump.tsv",
header = T,
sep = "\t")
View(clinical_data)
match(clinical_data['subject_id'], subject_ids)
subject_ids
match(clinical_data[,'subject_id'], subject_ids)
match(subject_ids, clinical_data[,'subject_id'])
subject_ids
clinical_data
subject_ids
match(subject_ids, clinical_data[,'subject_id'])
# load and filter the clinical data
clinical_data = read.table("output/database_dump/subject_dump.tsv",
header = T,
sep = "\t")
subject_idxs = match(subject_ids, clinical_data[,'subject_id'])
clinical_data = clinical_data[subject_idxs, ]
clinical_data
color_map = list(aP='red', wP='blue')
colors_map
color_map
colors = list()
for (i in seq(1, nrow(clinical_data))){
vac = clinical_data[i,'infancy_vac']
colors[i] = color_map[vac]
}
colors
clinical_data[, 'color'] = colors
clinical_data[, 'color'] = unlist(colors)
for (comp in seq(1, params$components){
pc2 = cvar2[,comp]
break
pc1 = cvar1[,comp]
pc2 = cvar2[,comp]
for (comp in seq(1, params$components){
for (comp in seq(1, params$components)){
pc1 = cvar1[,comp]
pc2 = cvar2[,comp]
break
}
pc1
q()
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
setwd("/Volumes/BioAdHoc/Groups/vd-ay/jreyna/projects/momix-notebook/scripts")
source("runfactorization.R")
library("RGCCA")
install.packages("RGCCA")
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
install.packages('r.jive')
library("InterSIM", quietly = TRUE)
install.packages("Biobase")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
library("InterSIM", quietly = TRUE)
install.extras('NMF')
install.extras('NMF')
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
install.packages('IntNMF')
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
install.packages('omicade4')
source("runfactorization.R")
install.packages("omicade4")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("omicade4")
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
install.packages("MSFA")
install.packages("remotes")
remotes::install_github("rdevito/MSFA")
library("InterSIM", quietly = TRUE)
source("runfactorization.R")
install.package("MOFAtools")
install.packages("devtools")
devtools::install_github("bioFAM/MOFAdata", build_opts = c("--no-resave-data"))
devtools::install_github("bioFAM/MOFA", build_opts = c("--no-resave-data"))
